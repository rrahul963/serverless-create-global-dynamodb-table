
service: test-global-table-creation
frameworkVersion: '>=1.1.0 <2.0.0'
plugins:
  - update-creds
  # - before-deploy
  # - serverless-create-global-dynamodb-table

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  tracing: true
  deploymentBucket:
    name: aws-deployment-packages-dev-us-east-1

# custom:
#   globalTables:
#     regions:
#       - us-east-2
#     createStack: true

resources:
  Resources:
    TestTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: 'Id'
            AttributeType: 'S'
        KeySchema:
          -
            AttributeName: 'Id'
            KeyType: 'HASH'
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
        # ProvisionedThroughput:
        #   ReadCapacityUnits: 5
        #   WriteCapacityUnits: 5
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        TableName: Test-Dynamodb-Table
        Tags:
          - Key: scheduler-ddb-thresholdminmax
            Value: ''

    # WriteCapacityScalableTarget:
    #   Type: AWS::ApplicationAutoScaling::ScalableTarget
    #   Properties:
    #     MaxCapacity: 5
    #     MinCapacity: 5
    #     ResourceId:
    #       Fn::Join:
    #       - /
    #       - - table
    #         - Ref: TestTable
    #     RoleARN:
    #       Fn::GetAtt: ScalingRole.Arn
    #     ScalableDimension: dynamodb:table:WriteCapacityUnits
    #     ServiceNamespace: dynamodb

    # ReadCapacityScalableTarget:
    #   Type: AWS::ApplicationAutoScaling::ScalableTarget
    #   Properties:
    #     MaxCapacity: 5
    #     MinCapacity: 5
    #     ResourceId:
    #       Fn::Join:
    #       - /
    #       - - table
    #         - Ref: TestTable
    #     RoleARN:
    #       Fn::GetAtt: ScalingRole.Arn
    #     ScalableDimension: dynamodb:table:ReadCapacityUnits
    #     ServiceNamespace: dynamodb

    # ScalingRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     AssumeRolePolicyDocument:
    #       Version: "2012-10-17"
    #       Statement:
    #         -
    #           Effect: "Allow"
    #           Principal:
    #             Service:
    #               - application-autoscaling.amazonaws.com
    #           Action:
    #             - "sts:AssumeRole"
    #     Path: "/"
    #     Policies:
    #       -
    #         PolicyName: "root"
    #         PolicyDocument:
    #           Version: "2012-10-17"
    #           Statement:
    #             -
    #               Effect: "Allow"
    #               Action:
    #                 - "dynamodb:DescribeTable"
    #                 - "dynamodb:UpdateTable"
    #                 - "cloudwatch:PutMetricAlarm"
    #                 - "cloudwatch:DescribeAlarms"
    #                 - "cloudwatch:GetMetricStatistics"
    #                 - "cloudwatch:SetAlarmState"
    #                 - "cloudwatch:DeleteAlarms"
    #               Resource: "*"

    # WriteScalingPolicy:
    #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
    #   Properties:
    #     PolicyName: WriteAutoScalingPolicy
    #     PolicyType: TargetTrackingScaling
    #     ScalingTargetId:
    #       Ref: WriteCapacityScalableTarget
    #     TargetTrackingScalingPolicyConfiguration:
    #       TargetValue: 50.0
    #       ScaleInCooldown: 60
    #       ScaleOutCooldown: 60
    #       PredefinedMetricSpecification:
    #         PredefinedMetricType: DynamoDBWriteCapacityUtilization

    # ReadScalingPolicy:
    #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
    #   Properties:
    #     PolicyName: ReadAutoScalingPolicy
    #     PolicyType: TargetTrackingScaling
    #     ScalingTargetId:
    #       Ref: ReadCapacityScalableTarget
    #     TargetTrackingScalingPolicyConfiguration:
    #       TargetValue: 50.0
    #       ScaleInCooldown: 60
    #       ScaleOutCooldown: 60
    #       PredefinedMetricSpecification:
    #         PredefinedMetricType: DynamoDBReadCapacityUtilization


  Outputs:
    TestTableName:
      Description: The name of Test table
      Value:
        Fn::Join:
          - ''
          - - Ref: TestTable
      Export:
        Name: ${self:service}:${self:provider.stage}:TestTableName

